// Given the following code:

var foo = 'hi';
(function bar() {
  var zap = 'ho';
})();
(function quux() {
  var zap = 'off to work we go';
  foo = 'yo';
  (function zoo() {
    var gap = 'yarr';
  })();
})();

// We can model it like so:
var globalScope = {};

// var foo = 'hi';
globalScope.foo = 'hi';

// function bar() { ... }
var barScope = Object.create(globalScope);

// var zap = 'ho';
barScope.zap = 'ho';

// function quux() { ... }
var quuxScope = Object.create(globalScope);

// var zap = 'off to work we go';
quuxScope.zap = 'off to work we go';

// foo = 'yo';
// Note that this modifies the prototype directly (ie; the globalScope)
quuxScope.__proto__.foo = 'yo';

// Can also be written more generally as:
/*
function assignValue(variableName, value, scope) {
  while (scope !== globalScope && !scope.hasOwnProperty(variableName)) {
    scope = scope.__proto__;
  }
  scope[variableName] = value;
}
assignValue('foo', 'yo', quuxScope);
*/

// function zoo() { ... }
var zooScope = Object.create(quuxScope);

// var gap = 'yarr';
zooScope.gap = 'yarr';

console.log(globalScope.foo);  // yo
console.log(barScope.foo);     // yo
console.log(quuxScope.foo);    // yo
console.log(zooScope.foo);     // yo

console.log(barScope.zap);     // ho
console.log(quuxScope.zap);    // off to work we go
console.log(zooScope.gap);     // yarr
